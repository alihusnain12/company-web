@tailwind base;
@tailwind components;
@tailwind utilities;

/* Custom Scrollbar for the entire webpage */
*::-webkit-scrollbar {
  width: 12px;
}

*::-webkit-scrollbar-track {
  background: #f1f1f1;
}

*::-webkit-scrollbar-thumb {
  background: linear-gradient(45deg, #f3ec78, #af4261);
  border-radius: 6px;
  border: 2px solid #ffffff; /* Optional: Add a border to enhance the mirror-like effect */
}

*::-webkit-scrollbar-thumb:hover {
  background: linear-gradient(45deg, #f3ec78, #af4261);
}

  




 /* EARTH */

 /* @keyframes orbit {
  0% {
    transform: rotate(0deg) translateX(100px) rotate(0deg);
  }
  100% {
    transform: rotate(360deg) translateX(100px) rotate(0deg);
  }
}

@media (min-width: 640px) {
  @keyframes orbit {
    0% {
      transform: rotate(0deg) translateX(150px) rotate(0deg);
    }
    100% {
      transform: rotate(360deg) translateX(150px) rotate(0deg);
    }
  }
}

@media (min-width: 1024px) {
  @keyframes orbit {
    0% {
      transform: rotate(0deg) translateX(200px) rotate(0deg);
    }
    100% {
      transform: rotate(360deg) translateX(200px) rotate(0deg);
    }
  }
}

.animate-orbit {
  animation: orbit 20s linear infinite;
} */

/* "use client";
import { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { GiEarthAmerica } from 'react-icons/gi'; // Importing the GiEarthAmerica icon from react-icons

const starsData = Array.from({ length: 200 }, () => ({
  width: Math.random() * 3 + 1,
  height: Math.random() * 3 + 1,
  top: `${Math.random() * 100}%`,
  left: `${Math.random() * 100}%`,
}));

const gradients = [
  'from-blue-900 via-black to-black',
  'from-purple-900 via-black to-black',
  'from-teal-900 via-black to-black', 
  'from-red-900 via-black to-black',
];

const headingVariants = {
  initial: { opacity: 0, x: 20 },
  animate: { opacity: 1, x: 0, transition: { duration: 1, ease: "easeOut" }},
};

const Galaxy = () => {
  const [gradientIndex, setGradientIndex] = useState(0);

  useEffect(() => {
    const interval = setInterval(() => {
      setGradientIndex((prevIndex) => (prevIndex + 1) % gradients.length);
    }, 3000); // Change gradient every 3 seconds
    return () => clearInterval(interval);
  }, [gradients.length]);

  return (
    <div className={`relative flex items-center justify-center min-h-screen bg-gradient-to-t ${gradients[gradientIndex]} overflow-hidden transition-all duration-[3000ms] p-5 sm:p-10 md:p-15 lg:p-20`}>
      <div className="absolute inset-0">
        {starsData.map((star, index) => (
          <motion.div 
            key={index}
            className="absolute bg-white rounded-full"
            style={{
              width: star.width,
              height: star.height,
              top: star.top,
              left: star.left,
            }}
            animate={{ opacity: [0, 1, 0] }}
            transition={{ duration: Math.random() * 2 + 1, repeat: Infinity, delay: Math.random() * 5 }}
          />
        ))}
      </div>
      <div className="relative w-full h-full flex items-center justify-center">
        <div className="absolute w-full h-full flex items-center justify-center animate-orbit">
          <GiEarthAmerica size={70} className="text-blue-500" />
        </div>
        <div className="relative z-10 text-center p-5">
          <motion.h1 
            className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl font-bold text-white drop-shadow-xl" 
            style={{ 
              background: 'linear-gradient(to right, #FFFFFF, #AAAAAA)', 
              WebkitBackgroundClip: 'text', 
              WebkitTextFillColor: 'transparent' 
            }}
            variants={headingVariants}
            initial="initial"
            animate="animate"
          >
            Start Your Journey<br className="hidden sm:block text-center" /> with Us
          </motion.h1>
        </div>
      </div>
    </div>
  );
};

export default Galaxy; */
